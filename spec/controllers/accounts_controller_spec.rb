require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccountsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: 'account name'}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController. Be sure to keep this updated too.
  let(:user){ create :user, :admin }
  let(:valid_session){ {user_id: user.to_param} }

  describe "GET index" do
    let(:admin) { FactoryGirl.create(:user, :admin) } 
    let(:practitioner) { FactoryGirl.create(:user, :practitioner) } 
    let(:client) { FactoryGirl.create(:user, :client) } 

    context "unauthenticated user" do
      it "cannot access account list" do
        get :index 
        expect(response).to redirect_to(new_user_session_path)
        expect(flash[:alert]).to have_content 'You need to sign in or sign up before continuing.'
      end

      it "returns http redirect to login page" do
        get :index
        expect(response).to have_http_status('302')
      end
    end

    context "clients" do
      before do
        sign_in(client)
      end
      
      it "cannot access account list" do
        get :index 
        expect(response).to redirect_to(root_path)
        expect(flash[:alert]).to have_content 'Access denied.'
      end

      it "returns http unauthorized" do
        get :index
        expect(response).to have_http_status('302')
      end
    end

    context "practitioners" do
      before do
        sign_in(practitioner)
      end
      
      it "cannot access account list" do
        get :index 
        expect(response).to redirect_to(root_path)
        expect(flash[:alert]).to have_content 'Access denied.'
      end

      it "returns http unauthorized" do
        get :index
        expect(response).to have_http_status('302')
      end
    end

    context "admins" do
      before do
        sign_in(admin)
      end
      
      # it "can access the accounts list page" do
      #   get :index 
      #   expect(response.body).to have_content 'Accounts'
      # end

      it "returns http success" do
        get :index
        expect(response).to have_http_status(:success)
      end
    end
  end

  # describe "GET show" do
  #   it "assigns the requested account as @account" do
  #     account = Account.create! valid_attributes
  #     get :show, {:id => account.to_param}, valid_session
  #     expect(assigns(:account)).to eq(account)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new account as @account" do
  #     get :new, {}, valid_session
  #     expect(assigns(:account)).to be_a_new(Account)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested account as @account" do
  #     account = Account.create! valid_attributes
  #     get :edit, {:id => account.to_param}, valid_session
  #     expect(assigns(:account)).to eq(account)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Account" do
  #       expect {
  #         post :create, {:account => valid_attributes}, valid_session
  #       }.to change(Account, :count).by(1)
  #     end

  #     it "assigns a newly created account as @account" do
  #       post :create, {:account => valid_attributes}, valid_session
  #       expect(assigns(:account)).to be_a(Account)
  #       expect(assigns(:account)).to be_persisted
  #     end

  #     it "redirects to the created account" do
  #       post :create, {:account => valid_attributes}, valid_session
  #       expect(response).to redirect_to(Account.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved account as @account" do
  #       post :create, {:account => invalid_attributes}, valid_session
  #       expect(assigns(:account)).to be_a_new(Account)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, {:account => invalid_attributes}, valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested account" do
  #       account = Account.create! valid_attributes
  #       put :update, {:id => account.to_param, :account => new_attributes}, valid_session
  #       account.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested account as @account" do
  #       account = Account.create! valid_attributes
  #       put :update, {:id => account.to_param, :account => valid_attributes}, valid_session
  #       expect(assigns(:account)).to eq(account)
  #     end

  #     it "redirects to the account" do
  #       account = Account.create! valid_attributes
  #       put :update, {:id => account.to_param, :account => valid_attributes}, valid_session
  #       expect(response).to redirect_to(account)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the account as @account" do
  #       account = Account.create! valid_attributes
  #       put :update, {:id => account.to_param, :account => invalid_attributes}, valid_session
  #       expect(assigns(:account)).to eq(account)
  #     end

  #     it "re-renders the 'edit' template" do
  #       account = Account.create! valid_attributes
  #       put :update, {:id => account.to_param, :account => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested account" do
  #     account = Account.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => account.to_param}, valid_session
  #     }.to change(Account, :count).by(-1)
  #   end

  #   it "redirects to the accounts list" do
  #     account = Account.create! valid_attributes
  #     delete :destroy, {:id => account.to_param}, valid_session
  #     expect(response).to redirect_to(accounts_url)
  #   end
  # end

end
